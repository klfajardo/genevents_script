#!/bin/bash
# genevents - Generate Events & Logs for the Splunk Training
# Create virtual servers that generate random events and logs to be monitored by the Splunk Software.
# Author: Kevin Fajardo, TSE Sitel Group.
# Contact: kevinfajardosoto12@gmail.com <- ideas, suggestions, report bugs

# VARIABLES
server_name="server"
n_server=1
ip_add_class="c"
readvar=""

# FUNCTIONS
# Generates a random number	# $1 -> max range
random_function() { 
	echo $(($RANDOM % $1))
}

# Generates an random IP address using the class specified
gen_ip_add() {
	case $1 in	
		a) # Class A
		  echo 10.$(random_function 256).$(random_function 256).$(random_function 256)
		  ;;
		b) # Class B
		  echo 172.$((RANDOM % (31 - 16 + 1) + 16)).$(random_function 256).$(random_function 256)
		  ;;
		c) # Class C
		  echo 192.168.$(random_function 256).$(random_function 256)
		  ;;
	esac
}

# Generates an IP address randomly
gen_random_ip_add() {
	case $(random_function 3) in	
		0) # Class A
		  echo 10.$(random_function 256).$(random_function 256).$(random_function 256)
		  ;;	
		1) # Class B
		  echo 172.$((RANDOM % (31 - 16 + 1) + 16)).$(random_function 256).$(random_function 256)
		  ;;	
		2) # Class C
		  echo 192.168.$(random_function 256).$(random_function 256)
		  ;;
		3) # Class LOOPBACK
		  echo 127.0.0.1
		  ;;
	esac
}

# MAIN SCRIPT

# select servername
printf "Server name (default server): "
read -e readvar

# check if the entered value is unset or empty (if empty, it's going to use the default value)
if [[ -n ${readvar} ]]; then	
	server_name=${readvar}; fi

# temporary solution to a bug
if [[ -z ${readvar} ]]; then	
	echo " "; fi

# just for troubleshooting, uncomment to troubleshoot this part
#echo "This is readvar: '${readvar}' and this is the entered value '${server_name}'"; echo

# select number of servers to create
printf "Number of servers (default 1): "
read -e readvar 

# check that the entered value is a number before saving the value
if [[ -n ${readvar} ]]; then	
	if ! [[ $readvar =~ ^[0-9]+$ ]]; then
		echo "genevents: '${readvar}' is not a valid number, try again."
		exit 1; fi
	n_server=${readvar}
fi

# just for troubleshooting, uncomment to troubleshoot this part
#echo "This is readvar: '${readvar}' and this is the entered value '${n_server}'"; echo

# select ip address class
printf "Server IP address class"; echo 
printf "	a	10.0.0.0 - 10.255.255.255 / 255.0.0.0"; echo 
printf "	b	172.16.0.0 - 172.16.39.255 / 255.255.0.0"; echo
printf "	c	192.168.0.0 - 192.168.255.255 / 255.255.255.0"; echo
printf "IP address class (default c): "; read -e readvar

# check the entered value is a valid option
if [[ -n ${readvar} ]]; then
	if ! [[ "$readvar" == "a" || "$readvar" == "b" || "$readvar" == "c" ]]; then
		echo "genevents: '${readvar}' is not a valid option, try again."
		exit 1; fi
	ip_add_class=${readvar}
fi

# just for troubleshooting, uncomment to troubleshoot this part
#echo "This is readvar: '${readvar}' and this is the entered value '${ip_add_class}'"; echo

echo "The following servers will be created: "

# check if a temporary list of servers already exists, if so, it will be deleted
if [ -e /var/tmp/genevents_servers ]; then
	rm -f /var/tmp/genevents_servers; fi	

# create a temporary list of servers that will be created in /var/tmp, before proceeding with their creation
for (( i=0; i<${n_server}; i++ )); do
	echo $(gen_ip_add ${ip_add_class})":"${server_name}$((i+1)) >> /var/tmp/genevents_servers	
done

# displays the list of servers as bullet points
while IFS= read -r line; do
	echo "- $line"
done < /var/tmp/genevents_servers

printf "You want to continue? (Y/n) "
read readvar

# check the entered value is a valid option (yes or no)
if [[ -n ${readvar} ]] && ! [[ "$readvar" == "Y" || "$readvar" == "y" ]]; then
		if ! [[ "$readvar" == "N" || "$readvar" == "n" ]]; then
			echo "genevents: '${readvar}' is not a valid option, try again."
			exit 1; fi
		echo "genevents: Exit succesfully, 0 servers were created."
		rm /var/tmp/genevents_servers
		exit 0
fi

echo "Creating servers..."

# checks the "servers" directory exists, if not it will create one.
if ! [ -d ./servers ]; then
	mkdir ./servers
fi

# checks if a directory with the same $server_name exists, if so, it will prompt that you should remove it before proceeding
if [ -d ./servers/${server_name} ]; then
	echo "genevents: '${server_name}' directory already exists! You need to delete it to use '${server_name}' as server name."
	echo "genevents: Process canceled."
	exit 1; fi

# creates servers main directory
mkdir ./servers/${server_name}

# copy the temporary list of servers inside /var/tmp to the servers main directory
cp /var/tmp/genevents_servers ./servers/${server_name}/servers

# creates a directory and a information file for each virtual server using the servers list
for (( i=0; i<${n_server}; i++ )); do
	mkdir ./servers/${server_name}/${server_name}$((i+1))
	sed "$((i+1))q;d" ./servers/${server_name}/servers > ./servers/${server_name}/${server_name}$((i+1))/this_server_info
done

# creates a information file about the servers creation and options
echo "server_name=${server_name}" > ./servers/${server_name}/info
echo "n_server=${n_server}" >> ./servers/${server_name}/info
echo "ip_add_class=${ip_add_class}" >> ./servers/${server_name}/info
echo ""
echo "Servers created on `date` by ${USER} user." >> ./servers/${server_name}/info

# copy the apache addon to the server main directory
cp -r ./addons/apache ./servers/${server_name}/

# add a progress bar in the future here
# - - - - -|

# DONE / EXIT
echo "${n_server} servers were created. Done succesfully!"
rm /var/tmp/genevents_servers; exit 0
